---
// Login Modal Component
---

<div
  id="login-modal"
  class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
  <div class="bg-white rounded-xl p-8 max-w-md w-full mx-4 relative">
    <!-- Close button -->
    <button
      id="close-login-modal"
      class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24">
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Logo -->
    <div class="text-center mb-6">
      <div class="logo flex items-center justify-center select-none">
        <span class="figma-logo" style="color: #000;">Figma</span><span
          class="folio-logo"
          style="color: #4d9f70;">folio</span
        >
      </div>
      <h2 class="text-2xl font-bold text-gray-900 mt-2">Welcome back</h2>
      <p class="text-gray-600">Sign in to your account</p>
    </div>

    <!-- Login Form -->
    <form id="login-form" class="space-y-4">
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-1"
          >Email</label
        >
        <input
          type="email"
          id="email"
          name="email"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4d9f70] focus:border-transparent"
          placeholder="Enter your email"
        />
        <div id="email-error" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>

      <div>
        <label
          for="password"
          class="block text-sm font-medium text-gray-700 mb-1">Password</label
        >
        <input
          type="password"
          id="password"
          name="password"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#4d9f70] focus:border-transparent"
          placeholder="Enter your password"
        />
        <div id="password-error" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>

      <div class="flex items-center justify-between">
        <a
          href="#"
          id="forgot-password-link"
          class="text-sm text-[#4d9f70] hover:text-[#388e5c]"
          >Forgot password?</a
        >
      </div>

      <button
        type="submit"
        class="w-full bg-[#4d9f70] text-white py-2 px-4 rounded-lg font-semibold hover:bg-[#388e5c] transition-colors duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
        id="login-button">
        Sign in
      </button>
    </form>

    <div class="mt-6 text-center">
      <p class="text-gray-600 text-sm">
        Don't have an account?
        <a
          href="#"
          id="signup-link"
          class="text-[#4d9f70] hover:text-[#388e5c] font-medium">Sign up</a
        >
      </p>
    </div>
  </div>
</div>

<script>
  // Language detection and dashboard navigation logic
  const getCurrentLanguage = () => {
    // Try to get language from URL path first
    const pathSegments = window.location.pathname.split("/");
    const langFromPath = pathSegments[1];

    // Supported languages
    const supportedLangs = ["en", "es", "de", "zh", "jp", "fr"];

    if (supportedLangs.includes(langFromPath)) {
      return langFromPath;
    }

    // Fallback to browser language
    const browserLang = navigator.language.split("-")[0];
    return supportedLangs.includes(browserLang) ? browserLang : "en";
  };

  const backToDashboard = () => {
    // Redirect to auth page with current language
    const currentLanguage = getCurrentLanguage();
    const authUrl = `https://app.figmafolio.com/${currentLanguage}/auth`;
    window.location.href = authUrl;
  };

  // Modal functionality
  const loginModal = document.getElementById("login-modal");
  const closeLoginModal = document.getElementById("close-login-modal");
  const loginForm = document.getElementById("login-form");
  const emailInput = document.getElementById("email");
  const passwordInput = document.getElementById("password");
  const emailError = document.getElementById("email-error");
  const passwordError = document.getElementById("password-error");
  const loginButton = document.getElementById("login-button");

  // Show modal function
  window.showLoginModal = () => {
    loginModal.classList.remove("hidden");
    document.body.style.overflow = "hidden";

    // Update signup link with current language
    updateSignupLink();
  };

  // Update signup and forgot password links to auth page with current language
  const updateSignupLink = () => {
    const currentLanguage = getCurrentLanguage();
    const authUrl = `https://app.figmafolio.com/${currentLanguage}/auth`;

    const signupLink = document.getElementById("signup-link");
    if (signupLink) {
      signupLink.href = authUrl;
    }

    // Also update forgot password link
    const forgotPasswordLink = document.getElementById("forgot-password-link");
    if (forgotPasswordLink) {
      forgotPasswordLink.href = authUrl;
    }
  };

  // Hide modal function
  const hideLoginModal = () => {
    loginModal.classList.add("hidden");
    document.body.style.overflow = "auto";
    // Clear form and errors
    loginForm.reset();
    emailError.classList.add("hidden");
    passwordError.classList.add("hidden");
    emailError.textContent = "";
    passwordError.textContent = "";
  };

  // Close modal events
  closeLoginModal.addEventListener("click", hideLoginModal);
  loginModal.addEventListener("click", (e) => {
    if (e.target === loginModal) {
      hideLoginModal();
    }
  });

  // Handle form submission
  loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const email = emailInput.value.trim();
    const password = passwordInput.value;

    // Clear previous errors
    emailError.classList.add("hidden");
    passwordError.classList.add("hidden");

    // Basic validation
    if (!email) {
      emailError.textContent = "Email is required";
      emailError.classList.remove("hidden");
      return;
    }

    if (!password) {
      passwordError.textContent = "Password is required";
      passwordError.classList.remove("hidden");
      return;
    }

    // Disable button during submission
    loginButton.disabled = true;
    loginButton.textContent = "Signing in...";

    try {
      // Here you would typically make an API call to your authentication service
      // For now, we'll simulate a successful login and redirect to dashboard

      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Success - redirect to dashboard
      backToDashboard();
    } catch (error) {
      console.error("Login error:", error);

      // Handle specific error cases
      if (error.message.includes("user-not-found")) {
        emailError.textContent = "Email address not found";
        emailError.classList.remove("hidden");
      } else if (error.message.includes("wrong-password")) {
        passwordError.textContent = "Wrong password";
        passwordError.classList.remove("hidden");
      } else if (error.message.includes("too-many-requests")) {
        passwordError.textContent =
          "Too many failed attempts. Please try again later.";
        passwordError.classList.remove("hidden");
      } else {
        passwordError.textContent = "An error occurred. Please try again.";
        passwordError.classList.remove("hidden");
      }
    } finally {
      // Re-enable button
      loginButton.disabled = false;
      loginButton.textContent = "Sign in";
    }
  });

  // Close modal on escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !loginModal.classList.contains("hidden")) {
      hideLoginModal();
    }
  });
</script>

<style>
  .logo {
    font-size: 1.5rem;
    font-weight: 700;
    letter-spacing: -1px;
    line-height: 1;
  }
  .figma-logo {
    color: #3a5e3a;
    font-weight: 700;
  }
  .folio-logo {
    color: #222;
    font-weight: 700;
  }
</style>
